schema {
  mutation: Mutation
  query: Query
}

enum FriendStatus {
  ACCEPTED
  SENT
  RECEIVED
}

type Friend {
  id: ID!
  userId: String!
  friendId: String!
  status: FriendStatus!
  friend: User
}

type PaginatedFriends {
  friends: [Friend!]!
  nextToken: String
}

enum Color {
  GREEN
  YELLOW
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
}

type Reaction {
  react: String!
  userIds: [String!]!
}

type Post {
  id: ID!
  userId: String!
  user: User
  puzzleDate: AWSDate!
  isHardMode: Boolean!
  message: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  colors: [[Color]!]!
  guesses: [String!]
  commentData: PaginatedComments!
  reactions: [Reaction!]!
}

type PaginatedPosts {
  posts: [Post!]!
  nextToken: String
}

type Comment {
  id: ID!
  postId: String!
  userId: String!
  user: User
  text: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PaginatedComments {
  comments: [Comment!]!
  nextToken: String
}

input PostInput {
  puzzleDate: AWSDate!
  isHardMode: Boolean!
  message: String
  colors: [[Color]!]!
  guesses: [String!]
}

input CommentInput {
  postId: String!
  text: String!
}

enum RefType {
  Comment
  Post
}

input ReactionInput {
  refId: String!
  refType: RefType!
  react: String!
}

type Query {
  listFriends(status: FriendStatus, limit: Int, nextToken: String): PaginatedFriends!
  listPosts(puzzleDate: AWSDate!, limit: Int, nextToken: String): PaginatedPosts!
  getCurrentUserPost(puzzleDate: AWSDate!): Post
  listFriendPosts(puzzleDate: AWSDate!, limit: Int, nextToken: String): PaginatedPosts!
  listPostComments(postId: String!, limit: Int, nextToken: String): PaginatedComments!
}

type Mutation {
  acceptFriendRequest(friendId: String!): Friend!
  deleteFriend(friendId: String!): Boolean
  sendFriendRequest(friendId: String!): Friend!
  createPost(input: PostInput!): Post!
  createComment(input: CommentInput!): Comment!
  createReaction(input: ReactionInput!): Reaction!
  deleteReaction(input: ReactionInput!): Reaction!
}
